import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from keyboards import *
from database import BookingDatabase
from config import ADMIN_ID, PARKS


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_PARK, SELECTING_DATE, SELECTING_TIME, SELECTING_EQUIPMENT, CONFIRMING_BOOKING = range(5)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = BookingDatabase()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    welcome_message = f"""
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MSK SK8COOL!* üõπ

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–ú—ã - –ª—É—á—à–∞—è —Å–∫–µ–π—Ç—à–∫–æ–ª–∞ –≤ –ú–æ—Å–∫–≤–µ, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –Ω–∞—É—á–∏—Ç—å—Å—è –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ —Å–∫–µ–π—Ç–µ –∏ —Å—Ç–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º —Ä–∞–π–¥–µ—Ä–æ–º! 

üî• *–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:*
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É —É—á–µ–Ω–∏–∫—É
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã —Å –æ–ø—ã—Ç–æ–º
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ
‚Ä¢ –ú–æ—Ä–µ –ø–æ–∑–∏—Ç–∏–≤–∞ –∏ –¥—Ä–∞–π–≤–∞!

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
"""
    
    await update.message.reply_text(
        welcome_message,
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

async def training_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö"""
    query = update.callback_query
    await query.answer()
    
    training_message = """
üèÉ‚Äç‚ôÇÔ∏è *–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ MSK SK8COOL:*

‚è∞ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 60-90 –º–∏–Ω—É—Ç
üë• **–ì—Ä—É–ø–ø—ã:** 3-6 —á–µ–ª–æ–≤–µ–∫ (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã)
üèÜ **–£—Ä–æ–≤–Ω–∏:** –û—Ç –Ω–æ–≤–∏—á–∫–∞ –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ

üìö **–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è:**
1Ô∏è‚É£ **–ë–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏** - —Å—Ç–æ–π–∫–∞, —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ, –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ
2Ô∏è‚É£ **–ü—Ä–æ—Å—Ç—ã–µ —Ç—Ä—é–∫–∏** - ollie, kickflip, shove-it
3Ô∏è‚É£ **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç—Ä—é–∫–∏** - 360 flip, varial kickflip
4Ô∏è‚É£ **–°—Ç–∏–ª—å –∏ —Ç–µ—Ö–Ω–∏–∫–∞** - –≥—Ä–∞–π–Ω–¥—ã, —Å–ª–∞–π–¥—ã, –º–∞–Ω—É–∞–ª—ã

üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã
‚Ä¢ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ

üí™ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –£–∂–µ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü –≤—ã –±—É–¥–µ—Ç–µ —É–≤–µ—Ä–µ–Ω–Ω–æ –∫–∞—Ç–∞—Ç—å—Å—è!

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ? üöÄ
"""
    
    await query.edit_message_text(
        training_message,
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

async def select_park(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –ø–∞—Ä–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    park_message = """
üìç *–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∫ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*

–£ –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–ª–∏—á–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–π–æ–Ω–∞—Ö –ú–æ—Å–∫–≤—ã. –ö–∞–∂–¥—ã–π –ø–∞—Ä–∫ —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏!
"""
    
    await query.edit_message_text(
        park_message,
        parse_mode='Markdown',
        reply_markup=get_park_selection_keyboard()
    )

async def show_park_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–∞—Ä–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    park_id = query.data.split('_')[1]
    park_info = PARKS[park_id]
    
    park_message = f"""
üèûÔ∏è *{park_info['name']}*

üìç **–ê–¥—Ä–µ—Å:** {park_info['address']}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {park_info['description']}

üó∫Ô∏è –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏ –ø–æ–Ω—è—Ç—å, —É–¥–æ–±–Ω–æ –ª–∏ –≤–∞–º –¥–æ–±–∏—Ä–∞—Ç—å—Å—è.

–ï—Å–ª–∏ —ç—Ç–æ—Ç –ø–∞—Ä–∫ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç - –Ω–∞–∂–º–∏—Ç–µ "–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∫" ‚úÖ
–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã - –Ω–∞–∂–º–∏—Ç–µ "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–∞—Ä–∫" üîÑ
"""
    
    await query.edit_message_text(
        park_message,
        parse_mode='Markdown',
        reply_markup=get_park_info_keyboard(park_id)
    )

async def confirm_park(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    park_id = query.data.split('_')[2]
    park_info = PARKS[park_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞—Ä–∫
    user_id = query.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]['park_id'] = park_id
    user_data[user_id]['park_name'] = park_info['name']
    
    park_message = f"""
‚úÖ *–ü–∞—Ä–∫ –≤—ã–±—Ä–∞–Ω: {park_info['name']}*

–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. 

üìÖ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã:* (–∑–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –∏ –¥–∞–ª–µ–µ)
"""
    
    await query.edit_message_text(
        park_message,
        parse_mode='Markdown',
        reply_markup=get_date_selection_keyboard()
    )
    
    return SELECTING_DATE

async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –¥–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "select_date":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        await query.edit_message_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=get_date_selection_keyboard()
        )
        return SELECTING_DATE
    
    date_str = query.data.split('_')[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    user_id = query.from_user.id
    user_data[user_id]['date'] = date_str
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        date_obj = datetime.strptime(date_str, '%Y-%m-%d')
        day_name = date_obj.strftime("%A")
        date_display = date_obj.strftime("%d.%m.%Y")
        
        day_translations = {
            'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥', 'Friday': '–ü—è—Ç–Ω–∏—Ü–∞', 'Saturday': '–°—É–±–±–æ—Ç–∞', 'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        
        day_ru = day_translations.get(day_name, day_name)
        
        date_message = f"""
üìÖ *–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {day_ru}, {date_display}*

–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.

‚è∞ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:*
"""
        
        await query.edit_message_text(
            date_message,
            parse_mode='Markdown',
            reply_markup=get_time_selection_keyboard()
        )
        
        return SELECTING_TIME
        
    except Exception as e:
        logger.error(f"Error parsing date: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_date_selection_keyboard()
        )
        return SELECTING_DATE

async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "select_time":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
        await query.edit_message_text(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=get_time_selection_keyboard()
        )
        return SELECTING_TIME
    
    time_str = query.data.split('_')[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    user_id = query.from_user.id
    user_data[user_id]['time'] = time_str
    
    time_message = f"""
‚è∞ *–í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ: {time_str}*

–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º.

üõ°Ô∏è **–ó–∞—â–∏—Ç–∞:** —à–ª–µ–º, –Ω–∞–∫–æ–ª–µ–Ω–Ω–∏–∫–∏, –Ω–∞–ª–æ–∫–æ—Ç–Ω–∏–∫–∏, –∑–∞—â–∏—Ç–∞ –∑–∞–ø—è—Å—Ç–∏–π
üõπ **–°–∫–µ–π—Ç–±–æ—Ä–¥:** –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ

–ß—Ç–æ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?
"""
    
    await query.edit_message_text(
        time_message,
        parse_mode='Markdown',
        reply_markup=get_equipment_keyboard()
    )
    
    return SELECTING_EQUIPMENT

async def select_equipment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "select_equipment":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        await query.edit_message_text(
            "üõ°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:",
            reply_markup=get_equipment_keyboard()
        )
        return SELECTING_EQUIPMENT
    
    equipment_map = {
        'equipment_protection': '–ó–∞—â–∏—Ç–∞',
        'equipment_skateboard': '–°–∫–µ–π—Ç–±–æ—Ä–¥',
        'equipment_both': '–ó–∞—â–∏—Ç–∞ + –°–∫–µ–π—Ç–±–æ—Ä–¥',
        'equipment_none': '–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ'
    }
    
    equipment = equipment_map.get(query.data, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    user_id = query.from_user.id
    user_data[user_id]['equipment'] = equipment
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–ø–∏—Å–∏
    park_name = user_data[user_id]['park_name']
    date = user_data[user_id]['date']
    time = user_data[user_id]['time']
    
    try:
        date_obj = datetime.strptime(date, '%Y-%m-%d')
        date_display = date_obj.strftime("%d.%m.%Y")
    except:
        date_display = date
    
    summary_message = f"""
üìã *–°–≤–æ–¥–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:*

üèûÔ∏è **–ü–∞—Ä–∫:** {park_name}
üìÖ **–î–∞—Ç–∞:** {date_display}
‚è∞ **–í—Ä–µ–º—è:** {time}
üõ°Ô∏è **–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:** {equipment}

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** 1500‚ÇΩ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ
‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 60-90 –º–∏–Ω—É—Ç

–í—Å–µ –≤–µ—Ä–Ω–æ? –ï—Å–ª–∏ –¥–∞ - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å! ‚úÖ
"""
    
    await query.edit_message_text(
        summary_message,
        parse_mode='Markdown',
        reply_markup=get_confirmation_keyboard()
    )
    
    return CONFIRMING_BOOKING

async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_name = query.from_user.first_name or query.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if query.data == "confirm_booking":
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        booking_data = user_data[user_id].copy()
        booking_id = db.add_booking(user_id, user_name, booking_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_message = f"""
üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!*

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name} (ID: {user_id})
üèûÔ∏è **–ü–∞—Ä–∫:** {booking_data['park_name']}
üìÖ **–î–∞—Ç–∞:** {booking_data['date']}
‚è∞ **–í—Ä–µ–º—è:** {booking_data['time']}
üõ°Ô∏è **–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:** {booking_data['equipment']}
üÜî **ID –∑–∞–ø–∏—Å–∏:** {booking_id}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å:
"""
        
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_message,
                parse_mode='Markdown',
                reply_markup=get_admin_confirmation_keyboard(user_id, booking_data)
            )
        except Exception as e:
            logger.error(f"Failed to send admin notification: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success_message = f"""
üéâ *–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*

–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! 

üìã **–í–∞—à–∞ –∑–∞—è–≤–∫–∞:**
üèûÔ∏è **–ü–∞—Ä–∫:** {booking_data['park_name']}
üìÖ **–î–∞—Ç–∞:** {booking_data['date']}
‚è∞ **–í—Ä–µ–º—è:** {booking_data['time']}
üõ°Ô∏è **–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:** {booking_data['equipment']}

‚è≥ **–°—Ç–∞—Ç—É—Å:** –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏! 

üÜî **–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:** {booking_id}

–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ –Ω–∞ –æ–¥–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É? üöÄ
"""
        
        await query.edit_message_text(
            success_message,
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_data:
            del user_data[user_id]
        
        return ConversationHandler.END
        
    elif query.data == "cancel_booking":
        # –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
        await query.edit_message_text(
            "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_data:
            del user_data[user_id]
        
        return ConversationHandler.END

async def about_school(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–µ–π—Ç—à–∫–æ–ª–µ"""
    query = update.callback_query
    await query.answer()
    
    about_message = """
üè´ *–û —Å–∫–µ–π—Ç—à–∫–æ–ª–µ MSK SK8COOL:*

üåü **–ù–∞—à–∞ –º–∏—Å—Å–∏—è:** –°–¥–µ–ª–∞—Ç—å —Å–∫–µ–π—Ç–±–æ—Ä–¥–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ!

üìö **–ò—Å—Ç–æ—Ä–∏—è:** –ú—ã –æ–±—É—á–∞–µ–º —Å–∫–µ–π—Ç–±–æ—Ä–¥–∏–Ω–≥—É —Å 2018 –≥–æ–¥–∞ –∏ –ø–æ–º–æ–≥–ª–∏ –±–æ–ª–µ–µ 500 —É—á–µ–Ω–∏–∫–∞–º –æ—Å–≤–æ–∏—Ç—å —ç—Ç–æ—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç.

üë®‚Äçüè´ **–¢—Ä–µ–Ω–µ—Ä—ã:** 
‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
‚Ä¢ –û–ø—ã—Ç –∫–∞—Ç–∞–Ω–∏—è 10+ –ª–µ—Ç
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É

üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤:**
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç—Ä—é–∫–æ–≤
‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ —Å–∫–µ–π—Ç-—Å–æ–æ–±—â–µ—Å—Ç–≤–∞

üíé **–ü–æ—á–µ–º—É –º—ã:**
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞
‚Ä¢ –ì–∏–±–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã

üöÄ **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ —Å—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é —Å–∫–µ–π—Ç-—Å–µ–º—å–∏!**
"""
    
    await query.edit_message_text(
        about_message,
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

async def contact_coach(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º"""
    query = update.callback_query
    await query.answer()
    
    contact_message = """
üìû *–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º:*

üí¨ **Telegram:** @msk_sk8cool_coach
üì± **WhatsApp:** +7 (999) 123-45-67
üìß **Email:** coach@msksk8cool.ru

‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** –ü–Ω-–í—Å 9:00-21:00

üîî **–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç:** –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç!

–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é? –°–º–µ–ª–æ –ø–∏—à–∏—Ç–µ! üí™
"""
    
    await query.edit_message_text(
        contact_message,
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    await start(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
async def admin_confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å"""
    query = update.callback_query
    await query.answer()
    
    user_id = int(query.data.split('_')[2])
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_bookings = db.get_user_bookings(user_id)
    if user_bookings:
        latest_booking = user_bookings[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
        db.confirm_booking(latest_booking['id'])
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"""
üéâ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*

‚úÖ **–°—Ç–∞—Ç—É—Å:** –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Ç—Ä–µ–Ω–µ—Ä–æ–º

üìã **–î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**
üèûÔ∏è **–ü–∞—Ä–∫:** {latest_booking['park_name']}
üìÖ **–î–∞—Ç–∞:** {latest_booking['date']}
‚è∞ **–í—Ä–µ–º—è:** {latest_booking['time']}
üõ°Ô∏è **–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:** {latest_booking['equipment']}

‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:** –ë–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∑–∞ 2 —á–∞—Å–∞!

üöÄ **–ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –æ—Ç–ª–∏—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!**

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º.
"""
            )
        except Exception as e:
            logger.error(f"Failed to notify user: {e}")
        
        await query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    else:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

async def admin_reject_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å"""
    query = update.callback_query
    await query.answer()
    
    user_id = int(query.data.split('_')[2])
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_bookings = db.get_user_bookings(user_id)
    if user_bookings:
        latest_booking = user_bookings[-1]
        db.reject_booking(latest_booking['id'], "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Ç—Ä–µ–Ω–µ—Ä–æ–º")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"""
‚ùå *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—Ä–µ–Ω–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.

üîÑ **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–∫
‚Ä¢ –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è

üìû **–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º:** @msk_sk8cool_coach

–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üòî
"""
            )
        except Exception as e:
            logger.error(f"Failed to notify user: {e}")
        
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
    else:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

async def admin_contact_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = int(query.data.split('_')[2])
    
    await query.edit_message_text(f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /contact_{user_id}")

async def send_reminders(context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö"""
    upcoming_bookings = db.get_upcoming_bookings(2)  # –ó–∞ 2 —á–∞—Å–∞
    
    for booking in upcoming_bookings:
        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await context.bot.send_message(
                chat_id=booking['user_id'],
                text=f"""
‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!*

üö® **–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —É –≤–∞—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!**

üìã **–î–µ—Ç–∞–ª–∏:**
üèûÔ∏è **–ü–∞—Ä–∫:** {booking['park_name']}
üìÖ **–î–∞—Ç–∞:** {booking['date']}
‚è∞ **–í—Ä–µ–º—è:** {booking['time']}
üõ°Ô∏è **–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:** {booking['equipment']}

üéØ **–ù–µ –∑–∞–±—É–¥—å—Ç–µ:**
‚Ä¢ –í–∑—è—Ç—å –∑–∞—â–∏—Ç—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
‚Ä¢ –í–∑—è—Ç—å —Å–∫–µ–π—Ç (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
‚Ä¢ –ü—Ä–∏–π—Ç–∏ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üòä

üöÄ **–£–¥–∞—á–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!**
"""
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"""
‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!*

üë§ **–£—á–µ–Ω–∏–∫:** {booking['user_name']}
üèûÔ∏è **–ü–∞—Ä–∫:** {booking['park_name']}
üìÖ **–î–∞—Ç–∞:** {booking['date']}
‚è∞ **–í—Ä–µ–º—è:** {booking['time']}

–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!
"""
            )
            
        except Exception as e:
            logger.error(f"Failed to send reminder: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    
    try:
        if update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º."
            )
    except:
        pass
