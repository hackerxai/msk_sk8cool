#!/usr/bin/env python3
"""
MSK SK8COOL - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""

import logging
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ContextTypes
from config import PARKS, TIME_SLOTS, DAY_PERIODS, ADMIN_ID
from reminders import ReminderSystem
from progress import ProgressSystem

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–º–∞–Ω–¥–µ start
    if context.args and context.args[0] == "msk_sk8cool":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –±–æ—Ç–∞
        user = update.effective_user
        user_name = user.first_name
        username = user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
        user_id = user.id
        
        welcome_message = (
            f"üëã *–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!*\n\n"
            f"üë§ *–ò–º—è:* {user_name}\n"
            f"üì± *Username:* @{username}\n"
            f"üÜî *ID:* {user_id}\n\n"
            f"üèÇ *–®–∫–æ–ª–∞:* MSK SK8COOL\n"
            f"üìÖ *–î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è:* {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!"
        )
        
        await update.message.reply_text(
            welcome_message,
            parse_mode='Markdown'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await update.message.reply_text(
            "üéØ *–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!*\n\n"
            "üèÇ *–ß—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å:*\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è 2-4 —á–µ–ª–æ–≤–µ–∫–∞\n"
            "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
            "‚Ä¢ –ó–∞–Ω—è—Ç–∏—è –≤ –ª—É—á—à–∏—Ö –ø–∞—Ä–∫–∞—Ö –ú–æ—Å–∫–≤—ã\n"
            "‚Ä¢ –û–ø—ã—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏\n\n"
            "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:*\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ: 2000‚ÇΩ/2 —á–∞—Å–∞\n"
            "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ: 3000‚ÇΩ/1.5 —á–∞—Å–∞\n"
            "‚Ä¢ –ê—Ä–µ–Ω–¥–∞ –∑–∞—â–∏—Ç—ã: +500‚ÇΩ\n"
            "‚Ä¢ –ê—Ä–µ–Ω–¥–∞ —Å–∫–µ–π—Ç–±–æ—Ä–¥–∞: +500‚ÇΩ\n\n"
            "üìÖ *–ö–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å?*\n"
            "–ó–∞–ø–∏—à–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ @msk_sk8cool_bot –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ!",
            parse_mode='Markdown'
        )
        return
    elif context.args and context.args[0] == "training":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        await training_info(update, context)
        return
    elif context.args and context.args[0] == "game":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∏–≥—Ä—ã
        await play_game(update, context)
        return
    
    # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    keyboard = [
        [InlineKeyboardButton("üèÇ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="training_info")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É", callback_data="play_game")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard")],
        [InlineKeyboardButton("üè´ –û —à–∫–æ–ª–µ", callback_data="about_school")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º", callback_data="contact_coach")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üõπ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MSK SK8COOL!*\n\n"
        "–ú—ã - —à–∫–æ–ª–∞ —Å–∫–µ–π—Ç–±–æ—Ä–¥–∏–Ω–≥–∞ –≤ –ú–æ—Å–∫–≤–µ! üèÇ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def training_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö"""
    await update.callback_query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìç –í—ã–±—Ä–∞—Ç—å –ø–∞—Ä–∫", callback_data="select_park")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üèÇ *–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n"
        "‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è 2-4 —á–µ–ª–æ–≤–µ–∫–∞\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1-1.5 —á–∞—Å–∞\n"
        "‚Ä¢ –û–ø—ã—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏\n"
        "‚Ä¢ –í—Å–µ —É—Ä–æ–≤–Ω–∏: –æ—Ç –Ω–æ–≤–∏—á–∫–æ–≤ –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö\n\n"
        "–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –ø–∞—Ä–∫ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! üéØ",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def about_school(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ"""
    await update.callback_query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üè´ *–û —à–∫–æ–ª–µ MSK SK8COOL:*\n\n"
        "–ú—ã –æ–±—É—á–∞–µ–º —Å–∫–µ–π—Ç–±–æ—Ä–¥–∏–Ω–≥—É —Å 2020 –≥–æ–¥–∞! üéì\n\n"
        "‚Ä¢ –ë–æ–ª–µ–µ 500 —É—á–µ–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ 5+ –æ–ø—ã—Ç–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤\n"
        "‚Ä¢ –ó–∞–Ω—è—Ç–∏—è –≤ –ª—É—á—à–∏—Ö –ø–∞—Ä–∫–∞—Ö –ú–æ—Å–∫–≤—ã\n"
        "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ! üöÄ",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def contact_coach(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ç—Ä–µ–Ω–µ—Ä–∞"""
    await update.callback_query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä—É", url="https://t.me/wip_sxiueohd?start=msk_sk8cool")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üìû *–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º:*\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º!\n\n"
        "‚è∞ *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* 9:00 - 21:00\n"
        "‚ö° *–û—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç!*\n\n"
        "–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —á–∞—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º! üöÄ",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.callback_query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üèÇ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="training_info")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É", callback_data="play_game")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard")],
        [InlineKeyboardButton("üè´ –û —à–∫–æ–ª–µ", callback_data="about_school")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º", callback_data="contact_coach")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üõπ *MSK SK8COOL - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def select_park(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –ø–∞—Ä–∫–∞"""
    await update.callback_query.answer()
    
    keyboard = []
    for park_id, park_info in PARKS.items():
        keyboard.append([InlineKeyboardButton(
            f"üìç {park_info['name']}", 
            callback_data=f"park_{park_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üìç *–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∫ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n"
        "–£ –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–ª–∏—á–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–π–æ–Ω–∞—Ö –ú–æ—Å–∫–≤—ã! üèûÔ∏è",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_park_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∫–µ"""
    await update.callback_query.answer()
    
    park_id = update.callback_query.data.split('_')[1]
    park_info = PARKS[park_id]
    
    keyboard = [
        [InlineKeyboardButton("üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", url=park_info['yandex_maps'])],
        [InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∫", callback_data=f"confirm_park_{park_id}")],
        [InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–∞—Ä–∫", callback_data="select_park")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        f"üèûÔ∏è *{park_info['name']}*\n\n"
        f"üó∫Ô∏è –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä—à—Ä—É—Ç!",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def confirm_park(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∫–∞"""
    await update.callback_query.answer()
    
    park_id = update.callback_query.data.split('_')[2]
    park_info = PARKS[park_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞—Ä–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.callback_query.from_user.id
    if 'user_data' not in context.user_data:
        context.user_data['user_data'] = {}
    context.user_data['user_data']['park_id'] = park_id
    context.user_data['user_data']['park_name'] = park_info['name']
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã (7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥)
    keyboard = []
    today = datetime.now()
    
    for i in range(1, 8):  # –°–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
        future_date = today + timedelta(days=i)
        day_name = future_date.strftime("%A")
        day_number = future_date.strftime("%d")
        month_name = future_date.strftime("%B")
        
        # –ü–µ—Ä–µ–≤–æ–¥ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        day_translations = {
            'Monday': '–ü–Ω', 'Tuesday': '–í—Ç', 'Wednesday': '–°—Ä', 'Thursday': '–ß—Ç',
            'Friday': '–ü—Ç', 'Saturday': '–°–±', 'Sunday': '–í—Å'
        }
        month_translations = {
            'January': '—è–Ω–≤', 'February': '—Ñ–µ–≤', 'March': '–º–∞—Ä', 'April': '–∞–ø—Ä',
            'May': '–º–∞–π', 'June': '–∏—é–Ω', 'July': '–∏—é–ª', 'August': '–∞–≤–≥',
            'September': '—Å–µ–Ω', 'October': '–æ–∫—Ç', 'November': '–Ω–æ—è', 'December': '–¥–µ–∫'
        }
        
        day_ru = day_translations.get(day_name, day_name)
        month_ru = month_translations.get(month_name, month_name)
        
        if i == 1:
            emoji = "üéØ"
            label = "–ó–∞–≤—Ç—Ä–∞"
        else:
            emoji = "üìã"
            label = f"{day_ru}, {day_number} {month_ru}"
        
        keyboard.append([InlineKeyboardButton(
            f"{emoji} {label}", 
            callback_data=f"date_{i}_days"
        )])
    
    keyboard.extend([
        [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π –ø–∞—Ä–∫", callback_data="select_park")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        f"üéØ *–ü–∞—Ä–∫ –≤—ã–±—Ä–∞–Ω: {park_info['name']}*\n\n"
        f"üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"‚ú® –ó–∞–ø–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –∏ –¥–∞–ª–µ–µ",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –¥–∞—Ç—ã"""
    await update.callback_query.answer()
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    parts = update.callback_query.data.split('_')
    days_ahead = int(parts[1])
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É
    today = datetime.now()
    selected_date = today + timedelta(days=days_ahead)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    day_name = selected_date.strftime("%A")
    day_number = selected_date.strftime("%d")
    month_name = selected_date.strftime("%B")
    
    # –ü–µ—Ä–µ–≤–æ–¥ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    day_translations = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞', 'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞', 'Saturday': '–°—É–±–±–æ—Ç–∞', 'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    month_translations = {
        'January': '—è–Ω–≤–∞—Ä—è', 'February': '—Ñ–µ–≤—Ä–∞–ª—è', 'March': '–º–∞—Ä—Ç–∞', 'April': '–∞–ø—Ä–µ–ª—è',
        'May': '–º–∞—è', 'June': '–∏—é–Ω—è', 'July': '–∏—é–ª—è', 'August': '–∞–≤–≥—É—Å—Ç–∞',
        'September': '—Å–µ–Ω—Ç—è–±—Ä—è', 'October': '–æ–∫—Ç—è–±—Ä—è', 'November': '–Ω–æ—è–±—Ä—è', 'December': '–¥–µ–∫–∞–±—Ä—è'
    }
    
    day_ru = day_translations.get(day_name, day_name)
    month_ru = month_translations.get(month_name, month_name)
    
    if days_ahead == 1:
        date_display = "–ó–∞–≤—Ç—Ä–∞"
    else:
        date_display = f"{day_ru}, {day_number} {month_ru}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    if 'user_data' not in context.user_data:
        context.user_data['user_data'] = {}
    context.user_data['user_data']['date'] = selected_date.strftime('%Y-%m-%d')
    context.user_data['user_data']['date_display'] = date_display
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–Ω—è
    keyboard = [
        [InlineKeyboardButton("‚òÄÔ∏è –î–µ–Ω—å", callback_data="period_day")],
        [InlineKeyboardButton("üåô –í–µ—á–µ—Ä", callback_data="period_evening")],
        [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data="select_park")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    park_name = context.user_data['user_data'].get('park_name', '–ü–∞—Ä–∫')
    
    await update.callback_query.edit_message_text(
        f"üéØ *–ü–∞—Ä–∫:* {park_name}\n"
        f"üìÖ *–î–∞—Ç–∞:* {date_display}\n\n"
        f"‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–Ω—è:*\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def select_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–Ω—è"""
    await update.callback_query.answer()
    
    period = update.callback_query.data.split('_')[1]
    period_info = DAY_PERIODS[period]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
    keyboard = []
    for time_slot in period_info['times']:
        if period == 'day':
            emoji = "‚òÄÔ∏è"
        else:
            emoji = "üåô"
        keyboard.append([InlineKeyboardButton(f"{emoji} {time_slot}", callback_data=f"time_{time_slot}")])
    
    keyboard.extend([
        [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="select_park")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    park_name = context.user_data['user_data'].get('park_name', '–ü–∞—Ä–∫')
    date_display = context.user_data['user_data'].get('date_display', '–î–∞—Ç–∞')
    
    await update.callback_query.edit_message_text(
        f"üéØ *–ü–∞—Ä–∫:* {park_name}\n"
        f"üìÖ *–î–∞—Ç–∞:* {date_display}\n"
        f"‚è∞ *–ü–µ—Ä–∏–æ–¥:* {period_info['name']}\n\n"
        f"üïê *–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:*\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    await update.callback_query.answer()
    
    callback_data = update.callback_query.data
    if callback_data.startswith("time_header_"):
        # –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        return
    
    time_slot = callback_data.split('_')[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    if 'user_data' not in context.user_data:
        context.user_data['user_data'] = {}
    context.user_data['user_data']['time'] = time_slot
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    if 'user_data' not in context.user_data:
        context.user_data['user_data'] = {}
    context.user_data['user_data']['time'] = time_slot
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É –º–µ–Ω—è –≤—Å—ë –µ—Å—Ç—å", callback_data="equipment_yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="equipment_no")],
        [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data="select_park")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    park_name = context.user_data['user_data'].get('park_name', '–ü–∞—Ä–∫')
    date_display = context.user_data['user_data'].get('date_display', '–î–∞—Ç–∞')
    
    await update.callback_query.edit_message_text(
        f"üéØ *–ü–∞—Ä–∫:* {park_name}\n"
        f"üìÖ *–î–∞—Ç–∞:* {date_display}\n"
        f"‚è∞ *–í—Ä–µ–º—è:* {time_slot}\n\n"
        f"üõ°Ô∏è *–î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω—É–∂–Ω—ã:*\n"
        f"‚Ä¢ –®–ª–µ–º\n"
        f"‚Ä¢ –ó–∞—â–∏—Ç–∞ (–Ω–∞–∫–æ–ª–µ–Ω–Ω–∏–∫–∏, –Ω–∞–ª–æ–∫–æ—Ç–Ω–∏–∫–∏)\n"
        f"‚Ä¢ –°–∫–µ–π—Ç–±–æ—Ä–¥\n\n"
        f"**–£ —Ç–µ–±—è –≤—Å—ë –µ—Å—Ç—å?**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def equipment_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
    await update.callback_query.answer()
    
    choice = update.callback_query.data.split('_')[1]
    
    if choice == "yes":
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å—ë –µ—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–ø–∏—Å–∏
        if 'user_data' not in context.user_data:
            context.user_data['user_data'] = {}
        context.user_data['user_data']['equipment'] = 'none'
        await confirm_booking(update, context)
    elif choice == "no":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
        keyboard = [
            [InlineKeyboardButton("üõ°Ô∏è –ó–∞—â–∏—Ç–∞", callback_data="equipment_protection")],
            [InlineKeyboardButton("üõπ –°–∫–µ–π—Ç–±–æ—Ä–¥", callback_data="equipment_skateboard")],
            [InlineKeyboardButton("üõ°Ô∏èüõπ –ó–∞—â–∏—Ç–∞ + –°–∫–µ–π—Ç–±–æ—Ä–¥", callback_data="equipment_both")],
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data="select_park")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        park_name = context.user_data['user_data'].get('park_name', '–ü–∞—Ä–∫')
        date_display = context.user_data['user_data'].get('date_display', '–î–∞—Ç–∞')
        time_slot = context.user_data['user_data'].get('time', '–í—Ä–µ–º—è')
        
        await update.callback_query.edit_message_text(
            f"üéØ *–ü–∞—Ä–∫:* {park_name}\n"
            f"üìÖ *–î–∞—Ç–∞:* {date_display}\n"
            f"‚è∞ *–í—Ä–µ–º—è:* {time_slot}\n\n"
            f"üõ°Ô∏è *–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def equipment_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
    await update.callback_query.answer()
    
    equipment_type = update.callback_query.data.split('_')[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    if 'user_data' not in context.user_data:
        context.user_data['user_data'] = {}
    context.user_data['user_data']['equipment'] = equipment_type
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–ø–∏—Å–∏
    await confirm_booking(update, context)

async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    await update.callback_query.answer()
    
    user_data = context.user_data.get('user_data', {})
    park_name = user_data.get('park_name', '–ü–∞—Ä–∫')
    date_display = user_data.get('date_display', '–î–∞—Ç–∞')
    time_slot = user_data.get('time', '–í—Ä–µ–º—è')
    equipment = user_data.get('equipment', 'none')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    equipment_text = {
        'protection': 'üõ°Ô∏è –ó–∞—â–∏—Ç–∞',
        'skateboard': 'üõπ –°–∫–µ–π—Ç–±–æ—Ä–¥',
        'both': 'üõ°Ô∏èüõπ –ó–∞—â–∏—Ç–∞ + –°–∫–µ–π—Ç–±–æ—Ä–¥',
        'none': '‚ú® –£ –º–µ–Ω—è –≤—Å—ë –µ—Å—Ç—å'
    }.get(equipment, '‚ú® –£ –º–µ–Ω—è –≤—Å—ë –µ—Å—Ç—å')
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="final_confirm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="booking_cancel")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        f"üéØ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏*\n\n"
        f"üèûÔ∏è *–ü–∞—Ä–∫:* {park_name}\n"
        f"üìÖ *–î–∞—Ç–∞:* {date_display}\n"
        f"‚è∞ *–í—Ä–µ–º—è:* {time_slot}\n"
        f"üõ°Ô∏è *–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:* {equipment_text}\n\n"
        f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* 1500‚ÇΩ\n"
        f"‚è±Ô∏è *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* 60-90 –º–∏–Ω—É—Ç\n\n"
        f"**–í—Å—ë –≤–µ—Ä–Ω–æ?**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def final_booking_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    await update.callback_query.answer()
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"Context user_data: {context.user_data}")
    
    user_data = context.user_data.get('user_data', {})
    logger.info(f"User data: {user_data}")
    
    park_name = user_data.get('park_name', '–ü–∞—Ä–∫')
    date_display = user_data.get('date_display', '–î–∞—Ç–∞')
    time_slot = user_data.get('time', '–í—Ä–µ–º—è')
    equipment = user_data.get('equipment', 'none')
    
    logger.info(f"Extracted data - Park: {park_name}, Date: {date_display}, Time: {time_slot}, Equipment: {equipment}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    equipment_text = {
        'protection': 'üõ°Ô∏è –ó–∞—â–∏—Ç–∞',
        'skateboard': 'üõπ –°–∫–µ–π—Ç–±–æ—Ä–¥',
        'both': 'üõ°Ô∏èüõπ –ó–∞—â–∏—Ç–∞ + –°–∫–µ–π—Ç–±–æ—Ä–¥',
        'none': '‚ú® –£ –º–µ–Ω—è –≤—Å—ë –µ—Å—Ç—å'
    }.get(equipment, '‚ú® –£ –º–µ–Ω—è –≤—Å—ë –µ—Å—Ç—å')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    username = update.callback_query.from_user.username
    username_text = f"@{username}" if username else "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    admin_message = (
        f"üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!*\n\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {update.callback_query.from_user.first_name}\n"
        f"üÜî *ID:* {update.callback_query.from_user.id}\n"
        f"üì± *Username:* {username_text}\n"
        f"üèûÔ∏è *–ü–∞—Ä–∫:* {park_name}\n"
        f"üìÖ *–î–∞—Ç–∞:* {date_display}\n"
        f"‚è∞ *–í—Ä–µ–º—è:* {time_slot}\n"
        f"üõ°Ô∏è *–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:* {equipment_text}\n\n"
        f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* 1500‚ÇΩ"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–∞—Ä–∫–µ
    park_id = user_data.get('park_id', 'park1')
    training_date = user_data.get('date', '')
    training_time = user_data.get('time', '')
    
    admin_keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_approve_{update.callback_query.from_user.id}_{park_id}_{training_date}_{training_time}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{update.callback_query.from_user.id}_{park_id}_{training_date}_{training_time}")]
    ]
    admin_reply_markup = InlineKeyboardMarkup(admin_keyboard)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_message,
            reply_markup=admin_reply_markup,
            parse_mode='Markdown'
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"üéâ *–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n\n"
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä—É.\n"
            f"üì± –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            f"üèûÔ∏è *–ü–∞—Ä–∫:* {park_name}\n"
            f"üìÖ *–î–∞—Ç–∞:* {date_display}\n"
            f"‚è∞ *–í—Ä–µ–º—è:* {time_slot}\n"
            f"üõ°Ô∏è *–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:* {equipment_text}\n\n"
            f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* 1500‚ÇΩ",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='Markdown'
        )

async def admin_approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞—è–≤–∫—É"""
    await update.callback_query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if update.callback_query.from_user.id != ADMIN_ID:
        await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = update.callback_query.data.split('_')
    user_id = parts[2]
    park_id = parts[3] if len(parts) > 3 else 'park1'
    training_date = parts[4] if len(parts) > 4 else ''
    training_time = parts[5] if len(parts) > 5 else ''
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–∫–µ
    park_info = PARKS.get(park_id, PARKS['park1'])
    park_name = park_info['name']
    park_link = park_info['yandex_maps']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await update.callback_query.edit_message_text(
        f"‚úÖ *–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
        f"üèûÔ∏è –ü–∞—Ä–∫: {park_name}\n"
        f"üìÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–º\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        parse_mode='Markdown'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üéâ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
                 f"‚úÖ –¢—Ä–µ–Ω–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n"
                 f"üì± –ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!\n\n"
                 f"üèûÔ∏è *–ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:* {park_name}\n"
                 f"üó∫Ô∏è [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({park_link})\n\n"
                 f"üìã –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π:\n"
                 f"‚Ä¢ –•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n"
                 f"‚Ä¢ –£–¥–æ–±–Ω—É—é –æ–¥–µ–∂–¥—É\n"
                 f"‚Ä¢ –í–æ–¥—É\n\n"
                 f"üöÄ –£–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!",
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        reminder_system = ReminderSystem(context.bot, context.job_queue)
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        booking_data = {
            'user_id': int(user_id),
            'user_name': update.callback_query.from_user.first_name,
            'username': f"@{update.callback_query.from_user.username}" if update.callback_query.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω",
            'park_name': park_name,
            'park_link': park_link,
            'date': training_date,
            'time': training_time
        }
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder_system.schedule_reminder(booking_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            progress_system = ProgressSystem()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await context.bot.get_chat(int(user_id))
            user_name = user_info.first_name
            username = user_info.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_result = progress_system.add_session(
                user_id=int(user_id),
                user_name=user_name,
                username=username,
                park_name=park_name,
                session_date=training_date,
                session_time=training_time
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if progress_result['new_achievements']:
                achievements_text = "\n".join([
                    f"üèÜ {achievement['name']}: {achievement['description']}"
                    for achievement in progress_result['new_achievements']
                ])
                
                await context.bot.send_message(
                    chat_id=int(user_id),
                    text=f"üéâ *–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!*\n\n{achievements_text}\n\n"
                         f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ",
                    parse_mode='Markdown'
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_message = progress_system.format_progress_message(int(user_id))
            await context.bot.send_message(
                chat_id=int(user_id),
                text=progress_message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

async def admin_reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É"""
    await update.callback_query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if update.callback_query.from_user.id != ADMIN_ID:
        await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = update.callback_query.data.split('_')
    user_id = parts[2]
    park_id = parts[3] if len(parts) > 3 else 'park1'
    training_date = parts[4] if len(parts) > 4 else ''
    training_time = parts[5] if len(parts) > 5 else ''
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–∫–µ
    park_info = PARKS.get(park_id, PARKS['park1'])
    park_name = park_info['name']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await update.callback_query.edit_message_text(
        f"‚ùå *–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
        f"üèûÔ∏è –ü–∞—Ä–∫: {park_name}\n"
        f"üìÖ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–º\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        parse_mode='Markdown'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå *–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*\n\n"
                 "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
                 "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                 "‚Ä¢ –ó–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è\n"
                 "‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞\n"
                 "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n\n"
                 "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º.",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

async def booking_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏"""
    await update.callback_query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=reply_markup
    )

async def my_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await update.callback_query.answer()
    
    try:
        progress_system = ProgressSystem()
        user_id = update.callback_query.from_user.id
        
        progress_message = progress_system.format_progress_message(user_id)
        
        keyboard = [
            [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            progress_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
    await update.callback_query.answer()
    
    try:
        progress_system = ProgressSystem()
        leaderboard_message = progress_system.format_leaderboard_message(5)
        
        keyboard = [
            [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            leaderboard_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )

async def coach_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–Ω–µ—Ä—É"""
    keyboard = [
        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä—É", url="https://t.me/wip_sxiueohd?start=msk_sk8cool")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìû *–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º:*\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º!\n\n"
        "‚è∞ *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* 9:00 - 21:00\n"
        "‚ö° *–û—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç!*\n\n"
        "–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —á–∞—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º! üöÄ",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def play_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã '–°–æ–±–∞–∫–∞ –Ω–∞ –°–∫–µ–π—Ç–µ'"""
    await update.callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∏–≥—Ä—ã (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    game_url = os.getenv('GAME_URL', 'https://web-production-af17e.up.railway.app/game')
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å!", web_app=WebAppInfo(url=game_url))],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üéÆ *–ò–≥—Ä–∞ '–°–æ–±–∞–∫–∞ –Ω–∞ –°–∫–µ–π—Ç–µ'*\n\n"
        "üêï –£–ø—Ä–∞–≤–ª—è–π —Å–æ–±–∞–∫–æ–π –Ω–∞ —Å–∫–µ–π—Ç–±–æ—Ä–¥–µ!\n"
        "üõπ –ü—Ä—ã–≥–∞–π —á–µ—Ä–µ–∑ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è!\n"
        "üèÜ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π —Ä–µ–∫–æ—Ä–¥—ã!\n\n"
        "üéØ *–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*\n"
        "‚Ä¢ –ù–∞–∂–º–∏ –ü–†–û–ë–ï–õ –∏–ª–∏ –∫–ª–∏–∫–Ω–∏ –¥–ª—è –ø—Ä—ã–∂–∫–∞\n"
        "‚Ä¢ –ò–∑–±–µ–≥–∞–π –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π\n"
        "‚Ä¢ –°–æ–±–∏—Ä–∞–π –æ—á–∫–∏!\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É! üöÄ",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def create_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø–∏—Å–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    # ID –∫–∞–Ω–∞–ª–∞
    channel_id = -1002879902839
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    try:
        test_message = "üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
        await context.bot.send_message(
            chat_id=channel_id,
            text=test_message
        )
        await update.message.reply_text("‚úÖ –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}")
        await update.message.reply_text("üîß –†–µ—à–µ–Ω–∏–µ:\n1. –î–æ–±–∞–≤—å –±–æ—Ç–∞ @msk_sk8coolbot –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n2. –î–∞–π –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n3. –ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /post —Å–Ω–æ–≤–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
    keyboard = [
        [InlineKeyboardButton("üèÇ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", url="https://t.me/msk_sk8coolbot?start=training")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É", url="https://t.me/msk_sk8coolbot?start=game")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    post_text = """
üõπ *MSK SK8COOL - –®–∫–æ–ª–∞ —Å–∫–µ–π—Ç–±–æ—Ä–¥–∏–Ω–≥–∞!*

üèÇ *–ó–∞–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*
‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è 2-4 —á–µ–ª–æ–≤–µ–∫–∞
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏  
‚Ä¢ –û–ø—ã—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
‚Ä¢ –ó–∞–Ω—è—Ç–∏—è –≤ –ª—É—á—à–∏—Ö –ø–∞—Ä–∫–∞—Ö –ú–æ—Å–∫–≤—ã

üéÆ *–ê –µ—â–µ —É –Ω–∞—Å –µ—Å—Ç—å –∫—Ä—É—Ç–∞—è –∏–≥—Ä–∞!*
–ü–æ–ø—Ä–æ–±—É–π —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–±–∞–∫–æ–π –Ω–∞ —Å–∫–µ–π—Ç–±–æ—Ä–¥–µ!

üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* 1500‚ÇΩ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ
‚è±Ô∏è *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* 60-90 –º–∏–Ω—É—Ç

üëá *–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø–∏—Å–∏!*
"""
    
    try:
        await context.bot.send_message(
            chat_id=channel_id,
            text=post_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        await update.message.reply_text("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")
    
    try:
        if update and update.callback_query:
            await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        elif update and update.message:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")
