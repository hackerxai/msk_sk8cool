#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è MSK SK8COOL
"""

import logging
from datetime import datetime, timedelta
from telegram import Bot
from config import ADMIN_ID

logger = logging.getLogger(__name__)

class ReminderSystem:
    def __init__(self, bot: Bot, job_queue):
        self.bot = bot
        self.job_queue = job_queue
    
    def schedule_reminder(self, booking_data: dict):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            training_date_str = booking_data.get('date')
            training_time_str = booking_data.get('time')
            
            if not training_date_str or not training_time_str:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
                return
            
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            training_datetime = datetime.strptime(f"{training_date_str} {training_time_str}", "%Y-%m-%d %H:%M")
            
            # –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∑–∞ 2 —á–∞—Å–∞ –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)
            reminder_time = training_datetime - timedelta(hours=2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
            if reminder_time <= datetime.now():
                logger.warning(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–º: {reminder_time}")
                return
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞—á–∏
            job_id = f"reminder_{booking_data.get('user_id')}_{training_date_str}_{training_time_str}"
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            self.job_queue.run_once(
                self.send_reminder,
                reminder_time,
                data=booking_data,
                name=job_id
            )
            
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {reminder_time} –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ {training_datetime}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    async def send_reminder(self, context):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω—É"""
        try:
            booking_data = context.job.data
            
            user_id = booking_data.get('user_id')
            park_name = booking_data.get('park_name')
            park_link = booking_data.get('park_link')
            training_time = booking_data.get('time')
            user_name = booking_data.get('user_name')
            username = booking_data.get('username')
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message = (
                f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!*\n\n"
                f"üèÇ –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —É –≤–∞—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!\n\n"
                f"üèûÔ∏è *–ú–µ—Å—Ç–æ:* {park_name}\n"
                f"‚è∞ *–í—Ä–µ–º—è:* {training_time}\n"
                f"üó∫Ô∏è [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({park_link})\n\n"
                f"üìã –ù–µ –∑–∞–±—É–¥—å—Ç–µ:\n"
                f"‚Ä¢ –£–¥–æ–±–Ω—É—é –æ–¥–µ–∂–¥—É\n"
                f"‚Ä¢ –í–æ–¥—É\n"
                f"‚Ä¢ –•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!\n\n"
                f"üöÄ –£–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!"
            )
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
            admin_message = (
                f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!*\n\n"
                f"üèÇ –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!\n\n"
                f"üë§ *–£—á–µ–Ω–∏–∫:* {user_name}\n"
                f"üì± *Username:* {username}\n"
                f"üèûÔ∏è *–ü–∞—Ä–∫:* {park_name}\n"
                f"‚è∞ *–í—Ä–µ–º—è:* {training_time}\n\n"
                f"üó∫Ô∏è [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({park_link})"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            await self.bot.send_message(
                chat_id=user_id,
                text=user_message,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
            await self.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_message,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ {training_time}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    def cancel_reminder(self, user_id: int, training_date: str, training_time: str):
        """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        try:
            job_id = f"reminder_{user_id}_{training_date}_{training_time}"
            self.job_queue.get_jobs_by_name(job_id)
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            jobs = self.job_queue.get_jobs_by_name(job_id)
            for job in jobs:
                job.schedule_removal()
            
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ: {job_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
